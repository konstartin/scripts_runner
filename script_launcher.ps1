# Script Launcher - Windows GUI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
# –í–µ—Ä—Å–∏—è: 1.0
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Windows PowerShell 5.1+, .NET Framework
#
# –¶–ï–õ–¨: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
# –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ –ø–∞–ø–∫–∞–º - –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!
#
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
# ‚Ä¢ üîë –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ AD
# ‚Ä¢ üë• –°–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# ‚Ä¢ üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
# ‚Ä¢ üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–∞–º
# ‚Ä¢ üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–ª–∏—Ç–∏–∫
# ‚Ä¢ üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
# ‚Ä¢ üíæ –°–∫—Ä–∏–ø—Ç—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
# ‚Ä¢ üîß –°–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
#
# –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:
# 1. –ó–∞–ø—É—Å—Ç–∏—Ç—å ScriptLauncher.ps1
# 2. –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Å–∫—Ä–∏–ø—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ "‚ûï AD —Å–∫—Ä–∏–ø—Ç", "‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –∏ —Ç.–¥.
# 3. –£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞ –∫–æ–ª–æ–Ω–∫—É "–ü—É—Ç—å")
# 4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
# 5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π!

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
$script:ConfigPath = Join-Path $PSScriptRoot "config.json"
$script:Scripts = @()
$script:Form = $null
$script:DataGridView = $null

# –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
class ScriptEntry {
    [string]$Name
    [string]$Path
    [string]$Runner
    [bool]$AskArgs
    [string]$DefaultArgs
    [string]$Category
    [string]$Description
    
    ScriptEntry() {
        $this.Name = ""
        $this.Path = ""
        $this.Runner = "PowerShell"
        $this.AskArgs = $false
        $this.DefaultArgs = ""
        $this.Category = "General"
        $this.Description = ""
    }
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function Load-Config {
    try {
        if (Test-Path $script:ConfigPath) {
            $jsonContent = Get-Content $script:ConfigPath -Raw -Encoding UTF8
            $configData = ConvertFrom-Json $jsonContent
            
            $script:Scripts = @()
            foreach ($item in $configData.Scripts) {
                $scriptEntry = [ScriptEntry]::new()
                $scriptEntry.Name = $item.Name
                $scriptEntry.Path = $item.Path
                $scriptEntry.Runner = $item.Runner
                $scriptEntry.AskArgs = $item.AskArgs
                $scriptEntry.DefaultArgs = $item.DefaultArgs
                $scriptEntry.Category = if ($item.Category) { $item.Category } else { "General" }
                $scriptEntry.Description = if ($item.Description) { $item.Description } else { "" }
                $script:Scripts += $scriptEntry
            }
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $($_.Exception.Message)", "–û—à–∏–±–∫–∞", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function Save-Config {
    try {
        $configData = @{
            Scripts = @()
        }
        
        foreach ($script in $script:Scripts) {
            $configData.Scripts += @{
                Name = $script.Name
                Path = $script.Path
                Runner = $script.Runner
                AskArgs = $script.AskArgs
                DefaultArgs = $script.DefaultArgs
                Category = $script.Category
                Description = $script.Description
            }
        }
        
        $jsonContent = ConvertTo-Json $configData -Depth 3 -Compress:$false
        [System.IO.File]::WriteAllText($script:ConfigPath, $jsonContent, [System.Text.Encoding]::UTF8)
        
        [System.Windows.Forms.MessageBox]::Show("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $($_.Exception.Message)", "–û—à–∏–±–∫–∞", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
}

# –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
function Filter-Scripts {
    param([string]$SearchText)
    
    $script:DataGridView.Rows.Clear()
    
    $filteredScripts = if ([string]::IsNullOrWhiteSpace($SearchText)) {
        $script:Scripts
    } else {
        $script:Scripts | Where-Object { 
            $_.Name -like "*$SearchText*" -or 
            $_.Category -like "*$SearchText*" -or 
            $_.Description -like "*$SearchText*" 
        }
    }
    
    foreach ($scriptEntry in $filteredScripts) {
        $row = New-Object System.Windows.Forms.DataGridViewRow
        $row.Cells.Add((New-Object System.Windows.Forms.DataGridViewTextBoxCell -Property @{Value = $scriptEntry.Name}))
        $row.Cells.Add((New-Object System.Windows.Forms.DataGridViewTextBoxCell -Property @{Value = $scriptEntry.Path}))
        
        # ComboBox –¥–ª—è Runner
        $runnerCell = New-Object System.Windows.Forms.DataGridViewComboBoxCell
        $runnerCell.Items.AddRange(@("PowerShell", "CMD", "WSL"))
        $runnerCell.Value = $scriptEntry.Runner
        $row.Cells.Add($runnerCell)
        
        # CheckBox –¥–ª—è AskArgs
        $askArgsCell = New-Object System.Windows.Forms.DataGridViewCheckBoxCell
        $askArgsCell.Value = $scriptEntry.AskArgs
        $row.Cells.Add($askArgsCell)
        
        $row.Cells.Add((New-Object System.Windows.Forms.DataGridViewTextBoxCell -Property @{Value = $scriptEntry.DefaultArgs}))
        
        # ComboBox –¥–ª—è Category
        $categoryCell = New-Object System.Windows.Forms.DataGridViewComboBoxCell
        $categoryCell.Items.AddRange(@("General", "Active Directory", "Users", "Network", "Security", "Reports", "Backup", "System"))
        $categoryCell.Value = $scriptEntry.Category
        $row.Cells.Add($categoryCell)
        
        $row.Cells.Add((New-Object System.Windows.Forms.DataGridViewTextBoxCell -Property @{Value = $scriptEntry.Description}))
        
        $script:DataGridView.Rows.Add($row)
    }
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
function Update-DataGrid {
    Filter-Scripts ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
function Add-NewScript {
    $script:Scripts += [ScriptEntry]::new()
    Update-DataGrid
    
    # –í—ã–¥–µ–ª–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    $lastRowIndex = $script:DataGridView.Rows.Count - 1
    $script:DataGridView.CurrentCell = $script:DataGridView.Rows[$lastRowIndex].Cells[0]
    $script:DataGridView.BeginEdit($true)
}

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞
function Add-TemplateScript {
    param(
        [string]$Category,
        [string]$Name,
        [string]$Runner,
        [bool]$AskArgs,
        [string]$Description
    )
    
    $newScript = [ScriptEntry]::new()
    $newScript.Name = $Name
    $newScript.Category = $Category
    $newScript.Runner = $Runner
    $newScript.AskArgs = $AskArgs
    $newScript.Description = $Description
    
    $script:Scripts += $newScript
    Update-DataGrid
    
    # –í—ã–¥–µ–ª–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    $lastRowIndex = $script:DataGridView.Rows.Count - 1
    $script:DataGridView.CurrentCell = $script:DataGridView.Rows[$lastRowIndex].Cells[1] # –§–æ–∫—É—Å –Ω–∞ Path
    $script:DataGridView.BeginEdit($true)
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
function Remove-Script {
    $selectedRows = $script:DataGridView.SelectedRows
    if ($selectedRows.Count -eq 0) {
        [System.Windows.Forms.MessageBox]::Show("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", "–í–Ω–∏–º–∞–Ω–∏–µ", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
        return
    }
    
    $result = [System.Windows.Forms.MessageBox]::Show("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã?", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", [System.Windows.Forms.MessageBoxButtons]::YesNo, [System.Windows.Forms.MessageBoxIcon]::Question)
    if ($result -eq [System.Windows.Forms.DialogResult]::Yes) {
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        $indices = @()
        foreach ($row in $selectedRows) {
            $indices += $row.Index
        }
        $indices = $indices | Sort-Object -Descending
        
        foreach ($index in $indices) {
            if ($index -lt $script:Scripts.Count) {
                $script:Scripts = $script:Scripts | Where-Object { $script:Scripts.IndexOf($_) -ne $index }
            }
        }
        
        Update-DataGrid
    }
}

# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Windows –ø—É—Ç–∏ –≤ WSL –ø—É—Ç—å
function Convert-ToWSLPath {
    param([string]$WindowsPath)
    
    if ($WindowsPath -match '^([A-Za-z]):(.*)$') {
        $drive = $matches[1].ToLower()
        $path = $matches[2] -replace '\\', '/'
        return "/mnt/$drive$path"
    }
    return $WindowsPath
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
function Run-Script {
    $selectedRows = $script:DataGridView.SelectedRows
    if ($selectedRows.Count -eq 0) {
        [System.Windows.Forms.MessageBox]::Show("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞", "–í–Ω–∏–º–∞–Ω–∏–µ", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
        return
    }
    
    if ($selectedRows.Count -gt 1) {
        [System.Windows.Forms.MessageBox]::Show("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞", "–í–Ω–∏–º–∞–Ω–∏–µ", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
        return
    }
    
    $selectedIndex = $selectedRows[0].Index
    if ($selectedIndex -ge $script:Scripts.Count) {
        [System.Windows.Forms.MessageBox]::Show("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–∫—Ä–∏–ø—Ç–∞", "–û—à–∏–±–∫–∞", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        return
    }
    
    $selectedScript = $script:Scripts[$selectedIndex]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (–∫—Ä–æ–º–µ WSL)
    if ($selectedScript.Runner -ne "WSL" -and -not (Test-Path $selectedScript.Path)) {
        [System.Windows.Forms.MessageBox]::Show("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $($selectedScript.Path)", "–û—à–∏–±–∫–∞", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        return
    }
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    $args = $selectedScript.DefaultArgs
    if ($selectedScript.AskArgs) {
        $inputForm = New-Object System.Windows.Forms.Form
        $inputForm.Text = "–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è: $($selectedScript.Name)"
        $inputForm.Size = New-Object System.Drawing.Size(400, 150)
        $inputForm.StartPosition = "CenterParent"
        $inputForm.FormBorderStyle = "FixedDialog"
        $inputForm.MaximizeBox = $false
        $inputForm.MinimizeBox = $false
        
        $label = New-Object System.Windows.Forms.Label
        $label.Text = "–í–≤–µ–¥–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:"
        $label.Location = New-Object System.Drawing.Point(10, 15)
        $label.Size = New-Object System.Drawing.Size(370, 20)
        $inputForm.Controls.Add($label)
        
        $textBox = New-Object System.Windows.Forms.TextBox
        $textBox.Location = New-Object System.Drawing.Point(10, 40)
        $textBox.Size = New-Object System.Drawing.Size(360, 25)
        $textBox.Text = $selectedScript.DefaultArgs
        $inputForm.Controls.Add($textBox)
        
        $okButton = New-Object System.Windows.Forms.Button
        $okButton.Text = "OK"
        $okButton.Location = New-Object System.Drawing.Point(215, 75)
        $okButton.Size = New-Object System.Drawing.Size(75, 25)
        $okButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
        $inputForm.Controls.Add($okButton)
        
        $cancelButton = New-Object System.Windows.Forms.Button
        $cancelButton.Text = "–û—Ç–º–µ–Ω–∞"
        $cancelButton.Location = New-Object System.Drawing.Point(295, 75)
        $cancelButton.Size = New-Object System.Drawing.Size(75, 25)
        $cancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
        $inputForm.Controls.Add($cancelButton)
        
        $inputForm.AcceptButton = $okButton
        $inputForm.CancelButton = $cancelButton
        
        $result = $inputForm.ShowDialog($script:Form)
        if ($result -eq [System.Windows.Forms.DialogResult]::Cancel) {
            return
        }
        
        $args = $textBox.Text
    }
    
    try {
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        $quotedPath = "`"$($selectedScript.Path)`""
        $processArgs = ""
        
        switch ($selectedScript.Runner) {
            "PowerShell" {
                $processArgs = "-ExecutionPolicy Bypass -NoProfile -File $quotedPath"
                if ($args.Trim() -ne "") {
                    $processArgs += " $args"
                }
                Start-Process "powershell.exe" -ArgumentList $processArgs
            }
            "CMD" {
                $processArgs = "/c $quotedPath"
                if ($args.Trim() -ne "") {
                    $processArgs += " $args"
                }
                Start-Process "cmd.exe" -ArgumentList $processArgs
            }
            "WSL" {
                $wslPath = Convert-ToWSLPath $selectedScript.Path
                $bashCommand = $wslPath
                if ($args.Trim() -ne "") {
                    $bashCommand += " $args"
                }
                # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è WSL
                $bashCommand = $bashCommand -replace "'", "'\''"
                Start-Process "wsl.exe" -ArgumentList "bash", "-c", "'$bashCommand'"
            }
            default {
                [System.Windows.Forms.MessageBox]::Show("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—É—Å–∫–∞: $($selectedScript.Runner)", "–û—à–∏–±–∫–∞", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
                return
            }
        }
        
        Write-Host "–ó–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç: $($selectedScript.Name) —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: $args"
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: $($_.Exception.Message)", "–û—à–∏–±–∫–∞", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
function Sync-DataFromGrid {
    for ($i = 0; $i -lt [Math]::Min($script:DataGridView.Rows.Count, $script:Scripts.Count); $i++) {
        $row = $script:DataGridView.Rows[$i]
        $script:Scripts[$i].Name = $row.Cells[0].Value
        $script:Scripts[$i].Path = $row.Cells[1].Value
        $script:Scripts[$i].Runner = $row.Cells[2].Value
        $script:Scripts[$i].AskArgs = $row.Cells[3].Value
        $script:Scripts[$i].DefaultArgs = $row.Cells[4].Value
        $script:Scripts[$i].Category = $row.Cells[5].Value
        $script:Scripts[$i].Description = $row.Cells[6].Value
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
function Create-MainForm {
    $script:Form = New-Object System.Windows.Forms.Form
    $script:Form.Text = "üöÄ Script Launcher v1.0 - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞–º–∏"
    $script:Form.Size = New-Object System.Drawing.Size(1100, 500)
    $script:Form.StartPosition = "CenterScreen"
    $script:Form.MinimumSize = New-Object System.Drawing.Size(1000, 400)
    
    # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞
    $searchPanel = New-Object System.Windows.Forms.Panel
    $searchPanel.Location = New-Object System.Drawing.Point(10, 10)
    $searchPanel.Size = New-Object System.Drawing.Size(1060, 35)
    $searchPanel.Anchor = "Top,Left,Right"
    
    $searchLabel = New-Object System.Windows.Forms.Label
    $searchLabel.Text = "–ü–æ–∏—Å–∫:"
    $searchLabel.Location = New-Object System.Drawing.Point(0, 8)
    $searchLabel.Size = New-Object System.Drawing.Size(50, 20)
    $searchPanel.Controls.Add($searchLabel)
    
    $searchBox = New-Object System.Windows.Forms.TextBox
    $searchBox.Location = New-Object System.Drawing.Point(55, 5)
    $searchBox.Size = New-Object System.Drawing.Size(200, 25)
    $searchBox.add_TextChanged({
        Filter-Scripts $searchBox.Text
    })
    $searchPanel.Controls.Add($searchBox)
    
    $clearButton = New-Object System.Windows.Forms.Button
    $clearButton.Text = "–û—á–∏—Å—Ç–∏—Ç—å"
    $clearButton.Location = New-Object System.Drawing.Point(265, 5)
    $clearButton.Size = New-Object System.Drawing.Size(70, 25)
    $clearButton.add_Click({
        $searchBox.Text = ""
        Filter-Scripts ""
    })
    $searchPanel.Controls.Add($clearButton)
    
    $script:Form.Controls.Add($searchPanel)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    $script:DataGridView = New-Object System.Windows.Forms.DataGridView
    $script:DataGridView.Location = New-Object System.Drawing.Point(10, 50)
    $script:DataGridView.Size = New-Object System.Drawing.Size(1060, 330)
    $script:DataGridView.Anchor = "Top,Bottom,Left,Right"
    $script:DataGridView.AllowUserToAddRows = $false
    $script:DataGridView.AllowUserToDeleteRows = $false
    $script:DataGridView.SelectionMode = "FullRowSelect"
    $script:DataGridView.MultiSelect = $true
    $script:DataGridView.AutoSizeColumnsMode = "Fill"
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    $nameColumn = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
    $nameColumn.Name = "Name"
    $nameColumn.HeaderText = "–ù–∞–∑–≤–∞–Ω–∏–µ"
    $nameColumn.FillWeight = 20
    $script:DataGridView.Columns.Add($nameColumn)
    
    $pathColumn = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
    $pathColumn.Name = "Path"
    $pathColumn.HeaderText = "–ü—É—Ç—å"
    $pathColumn.FillWeight = 30
    $script:DataGridView.Columns.Add($pathColumn)
    
    $runnerColumn = New-Object System.Windows.Forms.DataGridViewComboBoxColumn
    $runnerColumn.Name = "Runner"
    $runnerColumn.HeaderText = "–ó–∞–ø—É—Å–∫"
    $runnerColumn.FillWeight = 12
    $runnerColumn.Items.AddRange(@("PowerShell", "CMD", "WSL"))
    $script:DataGridView.Columns.Add($runnerColumn)
    
    $askArgsColumn = New-Object System.Windows.Forms.DataGridViewCheckBoxColumn
    $askArgsColumn.Name = "AskArgs"
    $askArgsColumn.HeaderText = "–°–ø—Ä–æ—Å–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
    $askArgsColumn.FillWeight = 15
    $script:DataGridView.Columns.Add($askArgsColumn)
    
    $defaultArgsColumn = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
    $defaultArgsColumn.Name = "DefaultArgs"
    $defaultArgsColumn.HeaderText = "–ê—Ä–≥—É–º–µ–Ω—Ç—ã"
    $defaultArgsColumn.FillWeight = 18
    $script:DataGridView.Columns.Add($defaultArgsColumn)
    
    $categoryColumn = New-Object System.Windows.Forms.DataGridViewComboBoxColumn
    $categoryColumn.Name = "Category"
    $categoryColumn.HeaderText = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
    $categoryColumn.FillWeight = 15
    $categoryColumn.Items.AddRange(@("General", "Active Directory", "Users", "Network", "Security", "Reports", "Backup", "System"))
    $script:DataGridView.Columns.Add($categoryColumn)
    
    $descriptionColumn = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
    $descriptionColumn.Name = "Description"
    $descriptionColumn.HeaderText = "–û–ø–∏—Å–∞–Ω–∏–µ"
    $descriptionColumn.FillWeight = 25
    $script:DataGridView.Columns.Add($descriptionColumn)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ —è—á–µ–π–∫—É –ø—É—Ç–∏
    $script:DataGridView.add_CellDoubleClick({
        param($sender, $e)
        if ($e.ColumnIndex -eq 1) { # –ö–æ–ª–æ–Ω–∫–∞ Path
            $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
            $openFileDialog.Title = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞"
            $openFileDialog.Filter = "–í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã (*.ps1;*.bat;*.cmd;*.exe;*.sh)|*.ps1;*.bat;*.cmd;*.exe;*.sh|PowerShell —Å–∫—Ä–∏–ø—Ç—ã (*.ps1)|*.ps1|Batch —Ñ–∞–π–ª—ã (*.bat;*.cmd)|*.bat;*.cmd|–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã (*.exe)|*.exe|Shell —Å–∫—Ä–∏–ø—Ç—ã (*.sh)|*.sh|–í—Å–µ —Ñ–∞–π–ª—ã (*.*)|*.*"
            
            if ($openFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
                $script:DataGridView.Rows[$e.RowIndex].Cells[$e.ColumnIndex].Value = $openFileDialog.FileName
            }
        }
    })
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—á–µ–µ–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    $script:DataGridView.add_CellValueChanged({
        Sync-DataFromGrid
    })
    
    $script:Form.Controls.Add($script:DataGridView)
    
    # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
    $buttonPanel = New-Object System.Windows.Forms.Panel
    $buttonPanel.Location = New-Object System.Drawing.Point(10, 390)
    $buttonPanel.Size = New-Object System.Drawing.Size(1060, 50)
    $buttonPanel.Anchor = "Bottom,Left,Right"
    
    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å"
    $addButton = New-Object System.Windows.Forms.Button
    $addButton.Text = "–î–æ–±–∞–≤–∏—Ç—å"
    $addButton.Location = New-Object System.Drawing.Point(0, 10)
    $addButton.Size = New-Object System.Drawing.Size(80, 30)
    $addButton.add_Click({ Add-NewScript })
    $buttonPanel.Controls.Add($addButton)
    
    # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
    $deleteButton = New-Object System.Windows.Forms.Button
    $deleteButton.Text = "–£–¥–∞–ª–∏—Ç—å"
    $deleteButton.Location = New-Object System.Drawing.Point(90, 10)
    $deleteButton.Size = New-Object System.Drawing.Size(80, 30)
    $deleteButton.add_Click({ Remove-Script })
    $buttonPanel.Controls.Add($deleteButton)
    
    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
    $runButton = New-Object System.Windows.Forms.Button
    $runButton.Text = "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
    $runButton.Location = New-Object System.Drawing.Point(180, 10)
    $runButton.Size = New-Object System.Drawing.Size(80, 30)
    $runButton.add_Click({ 
        Sync-DataFromGrid
        Run-Script 
    })
    $buttonPanel.Controls.Add($runButton)
    
    # –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    $saveButton = New-Object System.Windows.Forms.Button
    $saveButton.Text = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    $saveButton.Location = New-Object System.Drawing.Point(270, 10)
    $saveButton.Size = New-Object System.Drawing.Size(80, 30)
    $saveButton.add_Click({ 
        Sync-DataFromGrid
        Save-Config 
    })
    $buttonPanel.Controls.Add($saveButton)
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    $separator = New-Object System.Windows.Forms.Label
    $separator.Text = "|"
    $separator.Location = New-Object System.Drawing.Point(360, 15)
    $separator.Size = New-Object System.Drawing.Size(10, 20)
    $separator.ForeColor = [System.Drawing.Color]::Gray
    $buttonPanel.Controls.Add($separator)
    
    # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
    $addADButton = New-Object System.Windows.Forms.Button
    $addADButton.Text = "‚ûï AD —Å–∫—Ä–∏–ø—Ç"
    $addADButton.Location = New-Object System.Drawing.Point(380, 10)
    $addADButton.Size = New-Object System.Drawing.Size(100, 30)
    $addADButton.BackColor = [System.Drawing.Color]::LightBlue
    $addADButton.add_Click({ 
        Add-TemplateScript "Active Directory" "–ù–æ–≤—ã–π AD —Å–∫—Ä–∏–ø—Ç" "PowerShell" $true "–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Active Directory"
    })
    $buttonPanel.Controls.Add($addADButton)
    
    $addUserButton = New-Object System.Windows.Forms.Button
    $addUserButton.Text = "‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    $addUserButton.Location = New-Object System.Drawing.Point(490, 10)
    $addUserButton.Size = New-Object System.Drawing.Size(110, 30)
    $addUserButton.BackColor = [System.Drawing.Color]::LightGreen
    $addUserButton.add_Click({ 
        Add-TemplateScript "Users" "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" "PowerShell" $true "–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
    })
    $buttonPanel.Controls.Add($addUserButton)
    
    $addNetworkButton = New-Object System.Windows.Forms.Button
    $addNetworkButton.Text = "‚ûï –°–µ—Ç—å"
    $addNetworkButton.Location = New-Object System.Drawing.Point(610, 10)
    $addNetworkButton.Size = New-Object System.Drawing.Size(80, 30)
    $addNetworkButton.BackColor = [System.Drawing.Color]::LightYellow
    $addNetworkButton.add_Click({ 
        Add-TemplateScript "Network" "–°–µ—Ç–µ–≤–æ–π —Å–∫—Ä–∏–ø—Ç" "PowerShell" $false "–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é"
    })
    $buttonPanel.Controls.Add($addNetworkButton)
    
    $script:Form.Controls.Add($buttonPanel)
    
    # –Ω—É–∂–Ω–æ —á—Ç–æ –±—ã –∑–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É 
    $script:Form.add_FormClosing({
        Sync-DataFromGrid
    })
}

# main
function Main {
    try {
        Write-Host "–ó–∞–ø—É—Å–∫ Script Launcher..."
        
        # –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
        Load-Config
        
        
        Create-MainForm
        Update-DataGrid
        
        Write-Host "GUI"
        [System.Windows.Forms.Application]::Run($script:Form)
    }
    catch {
        Write-Host "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host $_.ScriptStackTrace -ForegroundColor Red
        [System.Windows.Forms.MessageBox]::Show("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $($_.Exception.Message)", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
Main